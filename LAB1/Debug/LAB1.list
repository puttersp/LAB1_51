
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800365c  0800365c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003664  08003664  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800366c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000010  0800367c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800367c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da58  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3a  00000000  00000000  0002da98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015915  00000000  00000000  00030f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd67  00000000  00000000  00046885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a048  00000000  00000000  000545ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de634  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032cc  00000000  00000000  000de684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800362c 	.word	0x0800362c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800362c 	.word	0x0800362c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <set>:

static int b_state_curr,b_state_last;

//fix_init

void   set(int x){switch(x){case 0:HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,HIGH);break;		//R1
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d82d      	bhi.n	8000546 <set+0x6a>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <set+0x14>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000513 	.word	0x08000513
 80004f8:	08000525 	.word	0x08000525
 80004fc:	08000535 	.word	0x08000535
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <set+0x74>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050a:	4812      	ldr	r0, [pc, #72]	; (8000554 <set+0x78>)
 800050c:	f001 fb42 	bl	8001b94 <HAL_GPIO_WritePin>
 8000510:	e019      	b.n	8000546 <set+0x6a>
							case 1:HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9 ,HIGH);break;		//R2
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <set+0x74>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <set+0x7c>)
 800051e:	f001 fb39 	bl	8001b94 <HAL_GPIO_WritePin>
 8000522:	e010      	b.n	8000546 <set+0x6a>
							case 2:HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5 ,HIGH);break;		//R3
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <set+0x74>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	2120      	movs	r1, #32
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <set+0x80>)
 800052e:	f001 fb31 	bl	8001b94 <HAL_GPIO_WritePin>
 8000532:	e008      	b.n	8000546 <set+0x6a>
							case 3:HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8 ,HIGH);break;}	//R4
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <set+0x74>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <set+0x80>)
 8000540:	f001 fb28 	bl	8001b94 <HAL_GPIO_WritePin>
 8000544:	bf00      	nop
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	40020000 	.word	0x40020000
 8000558:	40020800 	.word	0x40020800
 800055c:	40020400 	.word	0x40020400

08000560 <reset>:

void reset(int x){switch(x){case 0:HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,LOW);break;		//R1
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d82d      	bhi.n	80005ca <reset+0x6a>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <reset+0x14>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	08000585 	.word	0x08000585
 8000578:	08000597 	.word	0x08000597
 800057c:	080005a9 	.word	0x080005a9
 8000580:	080005b9 	.word	0x080005b9
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <reset+0x74>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058e:	4812      	ldr	r0, [pc, #72]	; (80005d8 <reset+0x78>)
 8000590:	f001 fb00 	bl	8001b94 <HAL_GPIO_WritePin>
 8000594:	e019      	b.n	80005ca <reset+0x6a>
							case 1:HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9 ,LOW);break;		//R2
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <reset+0x74>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	480e      	ldr	r0, [pc, #56]	; (80005dc <reset+0x7c>)
 80005a2:	f001 faf7 	bl	8001b94 <HAL_GPIO_WritePin>
 80005a6:	e010      	b.n	80005ca <reset+0x6a>
							case 2:HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5 ,LOW);break;		//R3
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <reset+0x74>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	2120      	movs	r1, #32
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <reset+0x80>)
 80005b2:	f001 faef 	bl	8001b94 <HAL_GPIO_WritePin>
 80005b6:	e008      	b.n	80005ca <reset+0x6a>
							case 3:HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8 ,LOW);break;}		//R4
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <reset+0x74>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <reset+0x80>)
 80005c4:	f001 fae6 	bl	8001b94 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000138 	.word	0x20000138
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020400 	.word	0x40020400

080005e4 <get_readButton>:

//fix_end

int get_readButton(){
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
	for(int i =0;i<16;i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e00a      	b.n	8000606 <get_readButton+0x22>
		if(b[i] == 0){
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <get_readButton+0x38>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <get_readButton+0x1c>
			return i;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	e006      	b.n	800060e <get_readButton+0x2a>
	for(int i =0;i<16;i++){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	ddf1      	ble.n	80005f0 <get_readButton+0xc>
		}
	}
	return 99;
 800060c:	2363      	movs	r3, #99	; 0x63
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000b8 	.word	0x200000b8

08000620 <get_savedButton>:

int get_savedButton(){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	for(int i =0;i<16;i++){
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e00a      	b.n	8000642 <get_savedButton+0x22>
		if(bp[i] == 0){
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <get_savedButton+0x38>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <get_savedButton+0x1c>
			return i;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	e006      	b.n	800064a <get_savedButton+0x2a>
	for(int i =0;i<16;i++){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	ddf1      	ble.n	800062c <get_savedButton+0xc>
		}
	}
	return 99;
 8000648:	2363      	movs	r3, #99	; 0x63
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200000f8 	.word	0x200000f8

0800065c <readButton>:

void readButton(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	static int x = 0;
	b_state_curr = 0;
 8000660:	4b2a      	ldr	r3, [pc, #168]	; (800070c <readButton+0xb0>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]

	b[(x*4)  ]   = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9); //L1
 8000666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066a:	4829      	ldr	r0, [pc, #164]	; (8000710 <readButton+0xb4>)
 800066c:	f001 fa7a 	bl	8001b64 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <readButton+0xb8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4611      	mov	r1, r2
 800067c:	4a26      	ldr	r2, [pc, #152]	; (8000718 <readButton+0xbc>)
 800067e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	b[(x*4)+1]   = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7); //L2
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	4825      	ldr	r0, [pc, #148]	; (800071c <readButton+0xc0>)
 8000686:	f001 fa6d 	bl	8001b64 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <readButton+0xb8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	3301      	adds	r3, #1
 8000696:	4611      	mov	r1, r2
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <readButton+0xbc>)
 800069a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	b[(x*4)+2]   = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6); //L3
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	481f      	ldr	r0, [pc, #124]	; (8000720 <readButton+0xc4>)
 80006a2:	f001 fa5f 	bl	8001b64 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <readButton+0xb8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	3302      	adds	r3, #2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a18      	ldr	r2, [pc, #96]	; (8000718 <readButton+0xbc>)
 80006b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	b[(x*4)+3]   = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7); //L4
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	4814      	ldr	r0, [pc, #80]	; (8000710 <readButton+0xb4>)
 80006be:	f001 fa51 	bl	8001b64 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <readButton+0xb8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	3303      	adds	r3, #3
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <readButton+0xbc>)
 80006d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

//	set(x);
//	reset((x+1)%4); //fix

	x++;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <readButton+0xb8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <readButton+0xb8>)
 80006de:	6013      	str	r3, [r2, #0]
	x = x % 4;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <readButton+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	425a      	negs	r2, r3
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	f002 0203 	and.w	r2, r2, #3
 80006ee:	bf58      	it	pl
 80006f0:	4253      	negpl	r3, r2
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <readButton+0xb8>)
 80006f4:	6013      	str	r3, [r2, #0]

	if(get_readButton() != 99){b_state_curr = 1;}
 80006f6:	f7ff ff75 	bl	80005e4 <get_readButton>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b63      	cmp	r3, #99	; 0x63
 80006fe:	d002      	beq.n	8000706 <readButton+0xaa>
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <readButton+0xb0>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000013c 	.word	0x2000013c
 8000710:	40020000 	.word	0x40020000
 8000714:	20000144 	.word	0x20000144
 8000718:	200000b8 	.word	0x200000b8
 800071c:	40020800 	.word	0x40020800
 8000720:	40020400 	.word	0x40020400

08000724 <statecheck>:

void statecheck(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

	  static int state = 0;
	  static int fault = 0;
	  static int faultState = 0;

	  switch(state){
 8000728:	4bbf      	ldr	r3, [pc, #764]	; (8000a28 <statecheck+0x304>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b63      	cmp	r3, #99	; 0x63
 800072e:	f200 8362 	bhi.w	8000df6 <statecheck+0x6d2>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <statecheck+0x14>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	080008c9 	.word	0x080008c9
 800073c:	0800091b 	.word	0x0800091b
 8000740:	08000983 	.word	0x08000983
 8000744:	080009eb 	.word	0x080009eb
 8000748:	08000a5f 	.word	0x08000a5f
 800074c:	08000ac7 	.word	0x08000ac7
 8000750:	08000b2f 	.word	0x08000b2f
 8000754:	08000b97 	.word	0x08000b97
 8000758:	08000bff 	.word	0x08000bff
 800075c:	08000c67 	.word	0x08000c67
 8000760:	08000cdb 	.word	0x08000cdb
 8000764:	08000d43 	.word	0x08000d43
 8000768:	08000df7 	.word	0x08000df7
 800076c:	08000df7 	.word	0x08000df7
 8000770:	08000df7 	.word	0x08000df7
 8000774:	08000df7 	.word	0x08000df7
 8000778:	08000df7 	.word	0x08000df7
 800077c:	08000df7 	.word	0x08000df7
 8000780:	08000df7 	.word	0x08000df7
 8000784:	08000df7 	.word	0x08000df7
 8000788:	08000df7 	.word	0x08000df7
 800078c:	08000df7 	.word	0x08000df7
 8000790:	08000df7 	.word	0x08000df7
 8000794:	08000df7 	.word	0x08000df7
 8000798:	08000df7 	.word	0x08000df7
 800079c:	08000df7 	.word	0x08000df7
 80007a0:	08000df7 	.word	0x08000df7
 80007a4:	08000df7 	.word	0x08000df7
 80007a8:	08000df7 	.word	0x08000df7
 80007ac:	08000df7 	.word	0x08000df7
 80007b0:	08000df7 	.word	0x08000df7
 80007b4:	08000df7 	.word	0x08000df7
 80007b8:	08000df7 	.word	0x08000df7
 80007bc:	08000df7 	.word	0x08000df7
 80007c0:	08000df7 	.word	0x08000df7
 80007c4:	08000df7 	.word	0x08000df7
 80007c8:	08000df7 	.word	0x08000df7
 80007cc:	08000df7 	.word	0x08000df7
 80007d0:	08000df7 	.word	0x08000df7
 80007d4:	08000df7 	.word	0x08000df7
 80007d8:	08000df7 	.word	0x08000df7
 80007dc:	08000df7 	.word	0x08000df7
 80007e0:	08000df7 	.word	0x08000df7
 80007e4:	08000df7 	.word	0x08000df7
 80007e8:	08000df7 	.word	0x08000df7
 80007ec:	08000df7 	.word	0x08000df7
 80007f0:	08000df7 	.word	0x08000df7
 80007f4:	08000df7 	.word	0x08000df7
 80007f8:	08000df7 	.word	0x08000df7
 80007fc:	08000df7 	.word	0x08000df7
 8000800:	08000df7 	.word	0x08000df7
 8000804:	08000df7 	.word	0x08000df7
 8000808:	08000df7 	.word	0x08000df7
 800080c:	08000df7 	.word	0x08000df7
 8000810:	08000df7 	.word	0x08000df7
 8000814:	08000df7 	.word	0x08000df7
 8000818:	08000df7 	.word	0x08000df7
 800081c:	08000df7 	.word	0x08000df7
 8000820:	08000df7 	.word	0x08000df7
 8000824:	08000df7 	.word	0x08000df7
 8000828:	08000df7 	.word	0x08000df7
 800082c:	08000df7 	.word	0x08000df7
 8000830:	08000df7 	.word	0x08000df7
 8000834:	08000df7 	.word	0x08000df7
 8000838:	08000df7 	.word	0x08000df7
 800083c:	08000df7 	.word	0x08000df7
 8000840:	08000df7 	.word	0x08000df7
 8000844:	08000df7 	.word	0x08000df7
 8000848:	08000df7 	.word	0x08000df7
 800084c:	08000df7 	.word	0x08000df7
 8000850:	08000df7 	.word	0x08000df7
 8000854:	08000df7 	.word	0x08000df7
 8000858:	08000df7 	.word	0x08000df7
 800085c:	08000df7 	.word	0x08000df7
 8000860:	08000df7 	.word	0x08000df7
 8000864:	08000df7 	.word	0x08000df7
 8000868:	08000df7 	.word	0x08000df7
 800086c:	08000df7 	.word	0x08000df7
 8000870:	08000df7 	.word	0x08000df7
 8000874:	08000df7 	.word	0x08000df7
 8000878:	08000df7 	.word	0x08000df7
 800087c:	08000df7 	.word	0x08000df7
 8000880:	08000df7 	.word	0x08000df7
 8000884:	08000df7 	.word	0x08000df7
 8000888:	08000df7 	.word	0x08000df7
 800088c:	08000df7 	.word	0x08000df7
 8000890:	08000df7 	.word	0x08000df7
 8000894:	08000df7 	.word	0x08000df7
 8000898:	08000df7 	.word	0x08000df7
 800089c:	08000df7 	.word	0x08000df7
 80008a0:	08000df7 	.word	0x08000df7
 80008a4:	08000df7 	.word	0x08000df7
 80008a8:	08000df7 	.word	0x08000df7
 80008ac:	08000df7 	.word	0x08000df7
 80008b0:	08000df7 	.word	0x08000df7
 80008b4:	08000df7 	.word	0x08000df7
 80008b8:	08000df7 	.word	0x08000df7
 80008bc:	08000df7 	.word	0x08000df7
 80008c0:	08000df7 	.word	0x08000df7
 80008c4:	08000db5 	.word	0x08000db5
	  case 0:	//non pressed
			  if(get_savedButton() == 9){state++;}
 80008c8:	f7ff feaa 	bl	8000620 <get_savedButton>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	d105      	bne.n	80008de <statecheck+0x1ba>
 80008d2:	4b55      	ldr	r3, [pc, #340]	; (8000a28 <statecheck+0x304>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a53      	ldr	r2, [pc, #332]	; (8000a28 <statecheck+0x304>)
 80008da:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 99){state=0;}
			  else{state = 99;fault++;faultState=0;}
			  break;
 80008dc:	e28b      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 80008de:	f7ff fe9f 	bl	8000620 <get_savedButton>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b0c      	cmp	r3, #12
 80008e6:	d103      	bne.n	80008f0 <statecheck+0x1cc>
 80008e8:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <statecheck+0x304>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
			  break;
 80008ee:	e282      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=0;}
 80008f0:	f7ff fe96 	bl	8000620 <get_savedButton>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b63      	cmp	r3, #99	; 0x63
 80008f8:	d103      	bne.n	8000902 <statecheck+0x1de>
 80008fa:	4b4b      	ldr	r3, [pc, #300]	; (8000a28 <statecheck+0x304>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
			  break;
 8000900:	e279      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=0;}
 8000902:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <statecheck+0x304>)
 8000904:	2263      	movs	r2, #99	; 0x63
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <statecheck+0x308>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a47      	ldr	r2, [pc, #284]	; (8000a2c <statecheck+0x308>)
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	4b47      	ldr	r3, [pc, #284]	; (8000a30 <statecheck+0x30c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
			  break;
 8000918:	e26d      	b.n	8000df6 <statecheck+0x6d2>
	  case 1:	// 6
			  if(get_savedButton() == 1){state++;}
 800091a:	f7ff fe81 	bl	8000620 <get_savedButton>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d105      	bne.n	8000930 <statecheck+0x20c>
 8000924:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <statecheck+0x304>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a3f      	ldr	r2, [pc, #252]	; (8000a28 <statecheck+0x304>)
 800092c:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=1;}
			  else{state = 99;fault++;faultState=1;}
			  break;
 800092e:	e262      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000930:	f7ff fe76 	bl	8000620 <get_savedButton>
 8000934:	4603      	mov	r3, r0
 8000936:	2b0c      	cmp	r3, #12
 8000938:	d103      	bne.n	8000942 <statecheck+0x21e>
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <statecheck+0x304>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			  break;
 8000940:	e259      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000942:	f7ff fe6d 	bl	8000620 <get_savedButton>
 8000946:	4603      	mov	r3, r0
 8000948:	2b0d      	cmp	r3, #13
 800094a:	d105      	bne.n	8000958 <statecheck+0x234>
 800094c:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <statecheck+0x304>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3b01      	subs	r3, #1
 8000952:	4a35      	ldr	r2, [pc, #212]	; (8000a28 <statecheck+0x304>)
 8000954:	6013      	str	r3, [r2, #0]
			  break;
 8000956:	e24e      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=1;}
 8000958:	f7ff fe62 	bl	8000620 <get_savedButton>
 800095c:	4603      	mov	r3, r0
 800095e:	2b63      	cmp	r3, #99	; 0x63
 8000960:	d103      	bne.n	800096a <statecheck+0x246>
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <statecheck+0x304>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
			  break;
 8000968:	e245      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=1;}
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <statecheck+0x304>)
 800096c:	2263      	movs	r2, #99	; 0x63
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <statecheck+0x308>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <statecheck+0x308>)
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <statecheck+0x30c>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
			  break;
 8000980:	e239      	b.n	8000df6 <statecheck+0x6d2>
	  case 2:	// 64
			  if(get_savedButton() == 10){state++;}
 8000982:	f7ff fe4d 	bl	8000620 <get_savedButton>
 8000986:	4603      	mov	r3, r0
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d105      	bne.n	8000998 <statecheck+0x274>
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <statecheck+0x304>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <statecheck+0x304>)
 8000994:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=2;}
			  else{state = 99;fault++;faultState=2;}
			  break;
 8000996:	e22e      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000998:	f7ff fe42 	bl	8000620 <get_savedButton>
 800099c:	4603      	mov	r3, r0
 800099e:	2b0c      	cmp	r3, #12
 80009a0:	d103      	bne.n	80009aa <statecheck+0x286>
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <statecheck+0x304>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
			  break;
 80009a8:	e225      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 80009aa:	f7ff fe39 	bl	8000620 <get_savedButton>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b0d      	cmp	r3, #13
 80009b2:	d105      	bne.n	80009c0 <statecheck+0x29c>
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <statecheck+0x304>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <statecheck+0x304>)
 80009bc:	6013      	str	r3, [r2, #0]
			  break;
 80009be:	e21a      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=2;}
 80009c0:	f7ff fe2e 	bl	8000620 <get_savedButton>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b63      	cmp	r3, #99	; 0x63
 80009c8:	d103      	bne.n	80009d2 <statecheck+0x2ae>
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <statecheck+0x304>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	601a      	str	r2, [r3, #0]
			  break;
 80009d0:	e211      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=2;}
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <statecheck+0x304>)
 80009d4:	2263      	movs	r2, #99	; 0x63
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <statecheck+0x308>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <statecheck+0x308>)
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <statecheck+0x30c>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	601a      	str	r2, [r3, #0]
			  break;
 80009e8:	e205      	b.n	8000df6 <statecheck+0x6d2>
	  case 3:	// 643
			  if(get_savedButton() == 1){state++;}
 80009ea:	f7ff fe19 	bl	8000620 <get_savedButton>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d105      	bne.n	8000a00 <statecheck+0x2dc>
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <statecheck+0x304>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <statecheck+0x304>)
 80009fc:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=3;}
			  else{state = 99;fault++;faultState=3;}
			  break;
 80009fe:	e1fa      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000a00:	f7ff fe0e 	bl	8000620 <get_savedButton>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b0c      	cmp	r3, #12
 8000a08:	d103      	bne.n	8000a12 <statecheck+0x2ee>
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <statecheck+0x304>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
			  break;
 8000a10:	e1f1      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000a12:	f7ff fe05 	bl	8000620 <get_savedButton>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d10b      	bne.n	8000a34 <statecheck+0x310>
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <statecheck+0x304>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	4a01      	ldr	r2, [pc, #4]	; (8000a28 <statecheck+0x304>)
 8000a24:	6013      	str	r3, [r2, #0]
			  break;
 8000a26:	e1e6      	b.n	8000df6 <statecheck+0x6d2>
 8000a28:	20000148 	.word	0x20000148
 8000a2c:	2000014c 	.word	0x2000014c
 8000a30:	20000150 	.word	0x20000150
			  else if(get_savedButton() == 99){state=3;}
 8000a34:	f7ff fdf4 	bl	8000620 <get_savedButton>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b63      	cmp	r3, #99	; 0x63
 8000a3c:	d103      	bne.n	8000a46 <statecheck+0x322>
 8000a3e:	4b99      	ldr	r3, [pc, #612]	; (8000ca4 <statecheck+0x580>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	601a      	str	r2, [r3, #0]
			  break;
 8000a44:	e1d7      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=3;}
 8000a46:	4b97      	ldr	r3, [pc, #604]	; (8000ca4 <statecheck+0x580>)
 8000a48:	2263      	movs	r2, #99	; 0x63
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	4b96      	ldr	r3, [pc, #600]	; (8000ca8 <statecheck+0x584>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a95      	ldr	r2, [pc, #596]	; (8000ca8 <statecheck+0x584>)
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	4b95      	ldr	r3, [pc, #596]	; (8000cac <statecheck+0x588>)
 8000a58:	2203      	movs	r2, #3
 8000a5a:	601a      	str	r2, [r3, #0]
			  break;
 8000a5c:	e1cb      	b.n	8000df6 <statecheck+0x6d2>
	  case 4:	// 6434
			  if(get_savedButton() == 3){state++;}
 8000a5e:	f7ff fddf 	bl	8000620 <get_savedButton>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d105      	bne.n	8000a74 <statecheck+0x350>
 8000a68:	4b8e      	ldr	r3, [pc, #568]	; (8000ca4 <statecheck+0x580>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a8d      	ldr	r2, [pc, #564]	; (8000ca4 <statecheck+0x580>)
 8000a70:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=4;}
			  else{state = 99;fault++;faultState=4;}
			  break;
 8000a72:	e1c0      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000a74:	f7ff fdd4 	bl	8000620 <get_savedButton>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b0c      	cmp	r3, #12
 8000a7c:	d103      	bne.n	8000a86 <statecheck+0x362>
 8000a7e:	4b89      	ldr	r3, [pc, #548]	; (8000ca4 <statecheck+0x580>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
			  break;
 8000a84:	e1b7      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000a86:	f7ff fdcb 	bl	8000620 <get_savedButton>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b0d      	cmp	r3, #13
 8000a8e:	d105      	bne.n	8000a9c <statecheck+0x378>
 8000a90:	4b84      	ldr	r3, [pc, #528]	; (8000ca4 <statecheck+0x580>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a83      	ldr	r2, [pc, #524]	; (8000ca4 <statecheck+0x580>)
 8000a98:	6013      	str	r3, [r2, #0]
			  break;
 8000a9a:	e1ac      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=4;}
 8000a9c:	f7ff fdc0 	bl	8000620 <get_savedButton>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b63      	cmp	r3, #99	; 0x63
 8000aa4:	d103      	bne.n	8000aae <statecheck+0x38a>
 8000aa6:	4b7f      	ldr	r3, [pc, #508]	; (8000ca4 <statecheck+0x580>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	601a      	str	r2, [r3, #0]
			  break;
 8000aac:	e1a3      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=4;}
 8000aae:	4b7d      	ldr	r3, [pc, #500]	; (8000ca4 <statecheck+0x580>)
 8000ab0:	2263      	movs	r2, #99	; 0x63
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4b7c      	ldr	r3, [pc, #496]	; (8000ca8 <statecheck+0x584>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a7b      	ldr	r2, [pc, #492]	; (8000ca8 <statecheck+0x584>)
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <statecheck+0x588>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	601a      	str	r2, [r3, #0]
			  break;
 8000ac4:	e197      	b.n	8000df6 <statecheck+0x6d2>
	  case 5:	// 64340
			  if(get_savedButton() == 5){state++;}
 8000ac6:	f7ff fdab 	bl	8000620 <get_savedButton>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d105      	bne.n	8000adc <statecheck+0x3b8>
 8000ad0:	4b74      	ldr	r3, [pc, #464]	; (8000ca4 <statecheck+0x580>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a73      	ldr	r2, [pc, #460]	; (8000ca4 <statecheck+0x580>)
 8000ad8:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=5;}
			  else{state = 99;fault++;faultState=5;}
			  break;
 8000ada:	e18c      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000adc:	f7ff fda0 	bl	8000620 <get_savedButton>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b0c      	cmp	r3, #12
 8000ae4:	d103      	bne.n	8000aee <statecheck+0x3ca>
 8000ae6:	4b6f      	ldr	r3, [pc, #444]	; (8000ca4 <statecheck+0x580>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
			  break;
 8000aec:	e183      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000aee:	f7ff fd97 	bl	8000620 <get_savedButton>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b0d      	cmp	r3, #13
 8000af6:	d105      	bne.n	8000b04 <statecheck+0x3e0>
 8000af8:	4b6a      	ldr	r3, [pc, #424]	; (8000ca4 <statecheck+0x580>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a69      	ldr	r2, [pc, #420]	; (8000ca4 <statecheck+0x580>)
 8000b00:	6013      	str	r3, [r2, #0]
			  break;
 8000b02:	e178      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=5;}
 8000b04:	f7ff fd8c 	bl	8000620 <get_savedButton>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b63      	cmp	r3, #99	; 0x63
 8000b0c:	d103      	bne.n	8000b16 <statecheck+0x3f2>
 8000b0e:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <statecheck+0x580>)
 8000b10:	2205      	movs	r2, #5
 8000b12:	601a      	str	r2, [r3, #0]
			  break;
 8000b14:	e16f      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=5;}
 8000b16:	4b63      	ldr	r3, [pc, #396]	; (8000ca4 <statecheck+0x580>)
 8000b18:	2263      	movs	r2, #99	; 0x63
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	4b62      	ldr	r3, [pc, #392]	; (8000ca8 <statecheck+0x584>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a61      	ldr	r2, [pc, #388]	; (8000ca8 <statecheck+0x584>)
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	4b61      	ldr	r3, [pc, #388]	; (8000cac <statecheck+0x588>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	601a      	str	r2, [r3, #0]
			  break;
 8000b2c:	e163      	b.n	8000df6 <statecheck+0x6d2>
	  case 6:	//643405
			  if(get_savedButton() == 3){state++;}
 8000b2e:	f7ff fd77 	bl	8000620 <get_savedButton>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d105      	bne.n	8000b44 <statecheck+0x420>
 8000b38:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <statecheck+0x580>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a59      	ldr	r2, [pc, #356]	; (8000ca4 <statecheck+0x580>)
 8000b40:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=6;}
			  else{state = 99;fault++;faultState=6;}
			  break;
 8000b42:	e158      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000b44:	f7ff fd6c 	bl	8000620 <get_savedButton>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b0c      	cmp	r3, #12
 8000b4c:	d103      	bne.n	8000b56 <statecheck+0x432>
 8000b4e:	4b55      	ldr	r3, [pc, #340]	; (8000ca4 <statecheck+0x580>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
			  break;
 8000b54:	e14f      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000b56:	f7ff fd63 	bl	8000620 <get_savedButton>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b0d      	cmp	r3, #13
 8000b5e:	d105      	bne.n	8000b6c <statecheck+0x448>
 8000b60:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <statecheck+0x580>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <statecheck+0x580>)
 8000b68:	6013      	str	r3, [r2, #0]
			  break;
 8000b6a:	e144      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=6;}
 8000b6c:	f7ff fd58 	bl	8000620 <get_savedButton>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b63      	cmp	r3, #99	; 0x63
 8000b74:	d103      	bne.n	8000b7e <statecheck+0x45a>
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <statecheck+0x580>)
 8000b78:	2206      	movs	r2, #6
 8000b7a:	601a      	str	r2, [r3, #0]
			  break;
 8000b7c:	e13b      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=6;}
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <statecheck+0x580>)
 8000b80:	2263      	movs	r2, #99	; 0x63
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	4b48      	ldr	r3, [pc, #288]	; (8000ca8 <statecheck+0x584>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <statecheck+0x584>)
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b47      	ldr	r3, [pc, #284]	; (8000cac <statecheck+0x588>)
 8000b90:	2206      	movs	r2, #6
 8000b92:	601a      	str	r2, [r3, #0]
			  break;
 8000b94:	e12f      	b.n	8000df6 <statecheck+0x6d2>
	  case 7:	//6434050
			  if(get_savedButton() == 3){state++;}
 8000b96:	f7ff fd43 	bl	8000620 <get_savedButton>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d105      	bne.n	8000bac <statecheck+0x488>
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <statecheck+0x580>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a3f      	ldr	r2, [pc, #252]	; (8000ca4 <statecheck+0x580>)
 8000ba8:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=7;}
			  else{state = 99;fault++;faultState=7;}
			  break;
 8000baa:	e124      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000bac:	f7ff fd38 	bl	8000620 <get_savedButton>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d103      	bne.n	8000bbe <statecheck+0x49a>
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <statecheck+0x580>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
			  break;
 8000bbc:	e11b      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000bbe:	f7ff fd2f 	bl	8000620 <get_savedButton>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b0d      	cmp	r3, #13
 8000bc6:	d105      	bne.n	8000bd4 <statecheck+0x4b0>
 8000bc8:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <statecheck+0x580>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <statecheck+0x580>)
 8000bd0:	6013      	str	r3, [r2, #0]
			  break;
 8000bd2:	e110      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=7;}
 8000bd4:	f7ff fd24 	bl	8000620 <get_savedButton>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b63      	cmp	r3, #99	; 0x63
 8000bdc:	d103      	bne.n	8000be6 <statecheck+0x4c2>
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <statecheck+0x580>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
			  break;
 8000be4:	e107      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=7;}
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <statecheck+0x580>)
 8000be8:	2263      	movs	r2, #99	; 0x63
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <statecheck+0x584>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <statecheck+0x584>)
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <statecheck+0x588>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
			  break;
 8000bfc:	e0fb      	b.n	8000df6 <statecheck+0x6d2>
	  case 8:	//64340500
			  if(get_savedButton() == 3){state++;}
 8000bfe:	f7ff fd0f 	bl	8000620 <get_savedButton>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d105      	bne.n	8000c14 <statecheck+0x4f0>
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <statecheck+0x580>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <statecheck+0x580>)
 8000c10:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=8;}
			  else{state = 99;fault++;faultState=8;}
			  break;
 8000c12:	e0f0      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000c14:	f7ff fd04 	bl	8000620 <get_savedButton>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b0c      	cmp	r3, #12
 8000c1c:	d103      	bne.n	8000c26 <statecheck+0x502>
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <statecheck+0x580>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
			  break;
 8000c24:	e0e7      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000c26:	f7ff fcfb 	bl	8000620 <get_savedButton>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b0d      	cmp	r3, #13
 8000c2e:	d105      	bne.n	8000c3c <statecheck+0x518>
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <statecheck+0x580>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <statecheck+0x580>)
 8000c38:	6013      	str	r3, [r2, #0]
			  break;
 8000c3a:	e0dc      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=8;}
 8000c3c:	f7ff fcf0 	bl	8000620 <get_savedButton>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b63      	cmp	r3, #99	; 0x63
 8000c44:	d103      	bne.n	8000c4e <statecheck+0x52a>
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <statecheck+0x580>)
 8000c48:	2208      	movs	r2, #8
 8000c4a:	601a      	str	r2, [r3, #0]
			  break;
 8000c4c:	e0d3      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=8;}
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <statecheck+0x580>)
 8000c50:	2263      	movs	r2, #99	; 0x63
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <statecheck+0x584>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <statecheck+0x584>)
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <statecheck+0x588>)
 8000c60:	2208      	movs	r2, #8
 8000c62:	601a      	str	r2, [r3, #0]
			  break;
 8000c64:	e0c7      	b.n	8000df6 <statecheck+0x6d2>
	  case 9:	//643405000
			  if(get_savedButton() == 5){state++;}
 8000c66:	f7ff fcdb 	bl	8000620 <get_savedButton>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d105      	bne.n	8000c7c <statecheck+0x558>
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <statecheck+0x580>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <statecheck+0x580>)
 8000c78:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=9;}
			  else{state = 99;fault++;faultState=9;}
			  break;
 8000c7a:	e0bc      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000c7c:	f7ff fcd0 	bl	8000620 <get_savedButton>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b0c      	cmp	r3, #12
 8000c84:	d103      	bne.n	8000c8e <statecheck+0x56a>
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <statecheck+0x580>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
			  break;
 8000c8c:	e0b3      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000c8e:	f7ff fcc7 	bl	8000620 <get_savedButton>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b0d      	cmp	r3, #13
 8000c96:	d10b      	bne.n	8000cb0 <statecheck+0x58c>
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <statecheck+0x580>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	4a01      	ldr	r2, [pc, #4]	; (8000ca4 <statecheck+0x580>)
 8000ca0:	6013      	str	r3, [r2, #0]
			  break;
 8000ca2:	e0a8      	b.n	8000df6 <statecheck+0x6d2>
 8000ca4:	20000148 	.word	0x20000148
 8000ca8:	2000014c 	.word	0x2000014c
 8000cac:	20000150 	.word	0x20000150
			  else if(get_savedButton() == 99){state=9;}
 8000cb0:	f7ff fcb6 	bl	8000620 <get_savedButton>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b63      	cmp	r3, #99	; 0x63
 8000cb8:	d103      	bne.n	8000cc2 <statecheck+0x59e>
 8000cba:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <statecheck+0x6d8>)
 8000cbc:	2209      	movs	r2, #9
 8000cbe:	601a      	str	r2, [r3, #0]
			  break;
 8000cc0:	e099      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=9;}
 8000cc2:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <statecheck+0x6d8>)
 8000cc4:	2263      	movs	r2, #99	; 0x63
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <statecheck+0x6dc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <statecheck+0x6dc>)
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <statecheck+0x6e0>)
 8000cd4:	2209      	movs	r2, #9
 8000cd6:	601a      	str	r2, [r3, #0]
			  break;
 8000cd8:	e08d      	b.n	8000df6 <statecheck+0x6d2>
	  case 10:	//6434050005
			  if(get_savedButton() == 2){state++;}
 8000cda:	f7ff fca1 	bl	8000620 <get_savedButton>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d105      	bne.n	8000cf0 <statecheck+0x5cc>
 8000ce4:	4b45      	ldr	r3, [pc, #276]	; (8000dfc <statecheck+0x6d8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <statecheck+0x6d8>)
 8000cec:	6013      	str	r3, [r2, #0]
			  else if(get_savedButton() == 12){state=0;}
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=10;}
			  else{state = 99;fault++;faultState=10;}
			  break;
 8000cee:	e082      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){state=0;}
 8000cf0:	f7ff fc96 	bl	8000620 <get_savedButton>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b0c      	cmp	r3, #12
 8000cf8:	d103      	bne.n	8000d02 <statecheck+0x5de>
 8000cfa:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <statecheck+0x6d8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
			  break;
 8000d00:	e079      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000d02:	f7ff fc8d 	bl	8000620 <get_savedButton>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b0d      	cmp	r3, #13
 8000d0a:	d105      	bne.n	8000d18 <statecheck+0x5f4>
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <statecheck+0x6d8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a3a      	ldr	r2, [pc, #232]	; (8000dfc <statecheck+0x6d8>)
 8000d14:	6013      	str	r3, [r2, #0]
			  break;
 8000d16:	e06e      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=10;}
 8000d18:	f7ff fc82 	bl	8000620 <get_savedButton>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b63      	cmp	r3, #99	; 0x63
 8000d20:	d103      	bne.n	8000d2a <statecheck+0x606>
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <statecheck+0x6d8>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	601a      	str	r2, [r3, #0]
			  break;
 8000d28:	e065      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=10;}
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <statecheck+0x6d8>)
 8000d2c:	2263      	movs	r2, #99	; 0x63
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <statecheck+0x6dc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <statecheck+0x6dc>)
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <statecheck+0x6e0>)
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	601a      	str	r2, [r3, #0]
			  break;
 8000d40:	e059      	b.n	8000df6 <statecheck+0x6d2>
	  case 11:	//64340500051
			  if(get_savedButton() == 15){HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);}
 8000d42:	f7ff fc6d 	bl	8000620 <get_savedButton>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d105      	bne.n	8000d58 <statecheck+0x634>
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	482d      	ldr	r0, [pc, #180]	; (8000e08 <statecheck+0x6e4>)
 8000d52:	f000 ff1f 	bl	8001b94 <HAL_GPIO_WritePin>
				  state=0;
			  }
			  else if(get_savedButton() == 13){state--;}
			  else if(get_savedButton() == 99){state=11;}
			  else{state = 99;fault++;faultState=11;}
			  break;
 8000d56:	e04e      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 12){
 8000d58:	f7ff fc62 	bl	8000620 <get_savedButton>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b0c      	cmp	r3, #12
 8000d60:	d108      	bne.n	8000d74 <statecheck+0x650>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2120      	movs	r1, #32
 8000d66:	4828      	ldr	r0, [pc, #160]	; (8000e08 <statecheck+0x6e4>)
 8000d68:	f000 ff14 	bl	8001b94 <HAL_GPIO_WritePin>
				  state=0;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <statecheck+0x6d8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
			  break;
 8000d72:	e040      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 13){state--;}
 8000d74:	f7ff fc54 	bl	8000620 <get_savedButton>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b0d      	cmp	r3, #13
 8000d7c:	d105      	bne.n	8000d8a <statecheck+0x666>
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <statecheck+0x6d8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <statecheck+0x6d8>)
 8000d86:	6013      	str	r3, [r2, #0]
			  break;
 8000d88:	e035      	b.n	8000df6 <statecheck+0x6d2>
			  else if(get_savedButton() == 99){state=11;}
 8000d8a:	f7ff fc49 	bl	8000620 <get_savedButton>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b63      	cmp	r3, #99	; 0x63
 8000d92:	d103      	bne.n	8000d9c <statecheck+0x678>
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <statecheck+0x6d8>)
 8000d96:	220b      	movs	r2, #11
 8000d98:	601a      	str	r2, [r3, #0]
			  break;
 8000d9a:	e02c      	b.n	8000df6 <statecheck+0x6d2>
			  else{state = 99;fault++;faultState=11;}
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <statecheck+0x6d8>)
 8000d9e:	2263      	movs	r2, #99	; 0x63
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <statecheck+0x6dc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <statecheck+0x6dc>)
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <statecheck+0x6e0>)
 8000dae:	220b      	movs	r2, #11
 8000db0:	601a      	str	r2, [r3, #0]
			  break;
 8000db2:	e020      	b.n	8000df6 <statecheck+0x6d2>
//	  case 12: //64340500051 OK
//	  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
//	  	  break;
	  case 99:
		  if(get_savedButton() == 12){state=0;}
 8000db4:	f7ff fc34 	bl	8000620 <get_savedButton>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	d102      	bne.n	8000dc4 <statecheck+0x6a0>
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <statecheck+0x6d8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
		  if(get_savedButton() == 13){fault--;}
 8000dc4:	f7ff fc2c 	bl	8000620 <get_savedButton>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b0d      	cmp	r3, #13
 8000dcc:	d105      	bne.n	8000dda <statecheck+0x6b6>
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <statecheck+0x6dc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <statecheck+0x6dc>)
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e004      	b.n	8000de4 <statecheck+0x6c0>
		  else{fault++;}
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <statecheck+0x6dc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <statecheck+0x6dc>)
 8000de2:	6013      	str	r3, [r2, #0]

		  if(fault == 0){
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <statecheck+0x6dc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d103      	bne.n	8000df4 <statecheck+0x6d0>
			  state = faultState;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <statecheck+0x6e0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a02      	ldr	r2, [pc, #8]	; (8000dfc <statecheck+0x6d8>)
 8000df2:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8000df4:	bf00      	nop
	  }

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000148 	.word	0x20000148
 8000e00:	2000014c 	.word	0x2000014c
 8000e04:	20000150 	.word	0x20000150
 8000e08:	40020000 	.word	0x40020000

08000e0c <saveButton>:

void saveButton(){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
	for(int i=0;i<16;i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	e00a      	b.n	8000e2e <saveButton+0x22>
		bp[i] = b[i];
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <saveButton+0x38>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e20:	4909      	ldr	r1, [pc, #36]	; (8000e48 <saveButton+0x3c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<16;i++){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	ddf1      	ble.n	8000e18 <saveButton+0xc>
	}
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200000b8 	.word	0x200000b8
 8000e48:	200000f8 	.word	0x200000f8

08000e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e50:	f000 fbe0 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e54:	f000 f86c 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e58:	f000 f948 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e5c:	f000 f91c 	bl	8001098 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000e60:	f000 f8d2 	bl	8001008 <MX_TIM11_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  b[100] = 0;
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <main+0xd0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  bp[100] = 0;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <main+0xd4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

  while (1)
  {

	  switch(process){
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <main+0xd8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d8fb      	bhi.n	8000e74 <main+0x28>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <main+0x38>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000eb3 	.word	0x08000eb3
 8000e8c:	08000ecb 	.word	0x08000ecb
 8000e90:	08000ee3 	.word	0x08000ee3
	  case 0:
		  reset(0);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fb63 	bl	8000560 <reset>
		  readButton();
 8000e9a:	f7ff fbdf 	bl	800065c <readButton>
		  set(0);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fb1c 	bl	80004dc <set>
		  reset(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff fb5b 	bl	8000560 <reset>
		  process = 1;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <main+0xd8>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
		  break;
 8000eb0:	e033      	b.n	8000f1a <main+0xce>

	  case 1:
	  	  readButton();
 8000eb2:	f7ff fbd3 	bl	800065c <readButton>
	      set(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fb10 	bl	80004dc <set>
	  	  reset(2);
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f7ff fb4f 	bl	8000560 <reset>
	  	  process = 2;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <main+0xd8>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	601a      	str	r2, [r3, #0]
	  	  break;
 8000ec8:	e027      	b.n	8000f1a <main+0xce>

	  case 2:
	  	  readButton();
 8000eca:	f7ff fbc7 	bl	800065c <readButton>
	      set(2);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fb04 	bl	80004dc <set>
	  	  reset(3);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff fb43 	bl	8000560 <reset>
	  	  process = 3;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <main+0xd8>)
 8000edc:	2203      	movs	r2, #3
 8000ede:	601a      	str	r2, [r3, #0]
	  	  break;
 8000ee0:	e01b      	b.n	8000f1a <main+0xce>

  	  case 3:
  		  readButton();
 8000ee2:	f7ff fbbb 	bl	800065c <readButton>
  		  set(3);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f7ff faf8 	bl	80004dc <set>
  		  reset(0);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fb37 	bl	8000560 <reset>
//  		  if(b_state_curr == 1){
//  			  saveButton();
//  		  }
  		  if(b_state_curr == 1 && b_state_last == 0){
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <main+0xdc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d107      	bne.n	8000f0a <main+0xbe>
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <main+0xe0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d103      	bne.n	8000f0a <main+0xbe>
  			  saveButton();
 8000f02:	f7ff ff83 	bl	8000e0c <saveButton>
  			  statecheck();
 8000f06:	f7ff fc0d 	bl	8000724 <statecheck>
  		  }

  		  b_state_last = b_state_curr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <main+0xdc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <main+0xe0>)
 8000f10:	6013      	str	r3, [r2, #0]
  		  process = 0;
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <main+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
  		  break;
 8000f18:	bf00      	nop
	  switch(process){
 8000f1a:	e7ab      	b.n	8000e74 <main+0x28>
 8000f1c:	200000b8 	.word	0x200000b8
 8000f20:	200000f8 	.word	0x200000f8
 8000f24:	20000154 	.word	0x20000154
 8000f28:	2000013c 	.word	0x2000013c
 8000f2c:	20000140 	.word	0x20000140

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fb6c 	bl	800361c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <SystemClock_Config+0xd0>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <SystemClock_Config+0xd0>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <SystemClock_Config+0xd0>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <SystemClock_Config+0xd4>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <SystemClock_Config+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000faa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fe03 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fc8:	f000 f961 	bl	800128e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 f865 	bl	80020b8 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ff4:	f000 f94b 	bl	800128e <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3750      	adds	r7, #80	; 0x50
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM11_Init+0x88>)
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <MX_TIM11_Init+0x8c>)
 800101e:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM11_Init+0x88>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM11_Init+0x88>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM11_Init+0x88>)
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM11_Init+0x88>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM11_Init+0x88>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM11_Init+0x88>)
 8001042:	f001 fb7b 	bl	800273c <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 800104c:	f000 f91f 	bl	800128e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <MX_TIM11_Init+0x88>)
 8001052:	f001 fc25 	bl	80028a0 <HAL_TIM_IC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 800105c:	f000 f917 	bl	800128e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM11_Init+0x88>)
 8001078:	f001 fd73 	bl	8002b62 <HAL_TIM_IC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8001082:	f000 f904 	bl	800128e <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000002c 	.word	0x2000002c
 8001094:	40014800 	.word	0x40014800

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f001 ffbe 	bl	8003050 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f000 f8d8 	bl	800128e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000074 	.word	0x20000074
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b56      	ldr	r3, [pc, #344]	; (8001260 <MX_GPIO_Init+0x174>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a55      	ldr	r2, [pc, #340]	; (8001260 <MX_GPIO_Init+0x174>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b53      	ldr	r3, [pc, #332]	; (8001260 <MX_GPIO_Init+0x174>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <MX_GPIO_Init+0x174>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a4e      	ldr	r2, [pc, #312]	; (8001260 <MX_GPIO_Init+0x174>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <MX_GPIO_Init+0x174>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <MX_GPIO_Init+0x174>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a47      	ldr	r2, [pc, #284]	; (8001260 <MX_GPIO_Init+0x174>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <MX_GPIO_Init+0x174>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <MX_GPIO_Init+0x174>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a40      	ldr	r2, [pc, #256]	; (8001260 <MX_GPIO_Init+0x174>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <MX_GPIO_Init+0x174>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001178:	483a      	ldr	r0, [pc, #232]	; (8001264 <MX_GPIO_Init+0x178>)
 800117a:	f000 fd0b 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001184:	4838      	ldr	r0, [pc, #224]	; (8001268 <MX_GPIO_Init+0x17c>)
 8001186:	f000 fd05 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001190:	4836      	ldr	r0, [pc, #216]	; (800126c <MX_GPIO_Init+0x180>)
 8001192:	f000 fcff 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800119c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	482e      	ldr	r0, [pc, #184]	; (8001268 <MX_GPIO_Init+0x17c>)
 80011ae:	f000 fb55 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80011b2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4826      	ldr	r0, [pc, #152]	; (8001264 <MX_GPIO_Init+0x178>)
 80011cc:	f000 fb46 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80011d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <MX_GPIO_Init+0x178>)
 80011e6:	f000 fb39 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	481a      	ldr	r0, [pc, #104]	; (8001268 <MX_GPIO_Init+0x17c>)
 80011fe:	f000 fb2d 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_GPIO_Init+0x17c>)
 800121c:	f000 fb1e 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001220:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0x180>)
 800123a:	f000 fb0f 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123e:	2340      	movs	r3, #64	; 0x40
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	2301      	movs	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_GPIO_Init+0x180>)
 8001252:	f000 fb03 	bl	800185c <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020800 	.word	0x40020800
 800126c:	40020400 	.word	0x40020400

08001270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d101      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001282:	f000 f9e9 	bl	8001658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001292:	b672      	cpsid	i
}
 8001294:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001296:	e7fe      	b.n	8001296 <Error_Handler+0x8>

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012d6:	2007      	movs	r0, #7
 80012d8:	f000 fa8b 	bl	80017f2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b090      	sub	sp, #64	; 0x40
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM11)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_TIM_Base_MspInit+0xb4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13b      	bne.n	8001394 <HAL_TIM_Base_MspInit+0xac>

  /* USER CODE END TIM11_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4618      	mov	r0, r3
 800132c:	f001 f916 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 8001336:	f7ff ffaa 	bl	800128e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_TIM_Base_MspInit+0xb8>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_TIM_Base_MspInit+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_TIM_Base_MspInit+0xb8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001384:	2303      	movs	r3, #3
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_TIM_Base_MspInit+0xbc>)
 8001390:	f000 fa64 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3740      	adds	r7, #64	; 0x40
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40014800 	.word	0x40014800
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_UART_MspInit+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12b      	bne.n	8001422 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001402:	230c      	movs	r3, #12
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001412:	2307      	movs	r3, #7
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <HAL_UART_MspInit+0x8c>)
 800141e:	f000 fa1d 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40004400 	.word	0x40004400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b34      	ldr	r3, [pc, #208]	; (8001520 <HAL_InitTick+0xe8>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a33      	ldr	r2, [pc, #204]	; (8001520 <HAL_InitTick+0xe8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_InitTick+0xe8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001464:	f107 0210 	add.w	r2, r7, #16
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f842 	bl	80024f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800147e:	f001 f813 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 8001482:	6378      	str	r0, [r7, #52]	; 0x34
 8001484:	e004      	b.n	8001490 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001486:	f001 f80f 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 800148a:	4603      	mov	r3, r0
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001492:	4a24      	ldr	r2, [pc, #144]	; (8001524 <HAL_InitTick+0xec>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	3b01      	subs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_InitTick+0xf0>)
 80014a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_InitTick+0xf0>)
 80014a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80014ae:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <HAL_InitTick+0xf0>)
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_InitTick+0xf0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_InitTick+0xf0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_InitTick+0xf0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <HAL_InitTick+0xf0>)
 80014c8:	f001 f938 	bl	800273c <HAL_TIM_Base_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d11b      	bne.n	8001512 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80014da:	4813      	ldr	r0, [pc, #76]	; (8001528 <HAL_InitTick+0xf0>)
 80014dc:	f001 f97e 	bl	80027dc <HAL_TIM_Base_Start_IT>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d111      	bne.n	8001512 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ee:	201c      	movs	r0, #28
 80014f0:	f000 f9a6 	bl	8001840 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	d808      	bhi.n	800150c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80014fa:	2200      	movs	r2, #0
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	201c      	movs	r0, #28
 8001500:	f000 f982 	bl	8001808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_InitTick+0xf4>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e002      	b.n	8001512 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001516:	4618      	mov	r0, r3
 8001518:	3738      	adds	r7, #56	; 0x38
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	431bde83 	.word	0x431bde83
 8001528:	20000158 	.word	0x20000158
 800152c:	20000008 	.word	0x20000008

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM2_IRQHandler+0x10>)
 800158e:	f001 f9e0 	bl	8002952 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000158 	.word	0x20000158

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c6:	490e      	ldr	r1, [pc, #56]	; (8001600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015dc:	4c0b      	ldr	r4, [pc, #44]	; (800160c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ea:	f7ff ffd7 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f001 fff1 	bl	80035d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff fc2b 	bl	8000e4c <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001604:	0800366c 	.word	0x0800366c
  ldr r2, =_sbss
 8001608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800160c:	200001a4 	.word	0x200001a4

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f8d8 	bl	80017f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fef8 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fe26 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c
 800167c:	200001a0 	.word	0x200001a0

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200001a0 	.word	0x200001a0

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff4c 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181a:	f7ff ff61 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 800181e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	6978      	ldr	r0, [r7, #20]
 8001826:	f7ff ffb1 	bl	800178c <NVIC_EncodePriority>
 800182a:	4602      	mov	r2, r0
 800182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff80 	bl	8001738 <__NVIC_SetPriority>
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff54 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e159      	b.n	8001b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8148 	bne.w	8001b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d005      	beq.n	80018ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d130      	bne.n	8001910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0201 	and.w	r2, r3, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b03      	cmp	r3, #3
 800191a:	d017      	beq.n	800194c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d123      	bne.n	80019a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a2 	beq.w	8001b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fe:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x202>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2f4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x1fe>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_GPIO_Init+0x2f8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_GPIO_Init+0x2fc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x1f6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x1f2>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a2f      	ldr	r2, [pc, #188]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f aea2 	bls.w	8001878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e267      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d075      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d00c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf2:	4b85      	ldr	r3, [pc, #532]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d112      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0a:	d10b      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d05b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d157      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e242      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d106      	bne.n	8001c3c <HAL_RCC_OscConfig+0x74>
 8001c2e:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xb0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6f      	ldr	r2, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6c      	ldr	r2, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xb0>
 8001c60:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a68      	ldr	r2, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fcfe 	bl	8001680 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fcfa 	bl	8001680 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e207      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xc0>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcea 	bl	8001680 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fce6 	bl	8001680 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1f3      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xe8>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cde:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b44      	ldr	r3, [pc, #272]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x152>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1c7      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4937      	ldr	r1, [pc, #220]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_OscConfig+0x244>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fc9f 	bl	8001680 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fc9b 	bl	8001680 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1a8      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4925      	ldr	r1, [pc, #148]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_RCC_OscConfig+0x244>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc7e 	bl	8001680 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fc7a 	bl	8001680 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e187      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d036      	beq.n	8001e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d016      	beq.n	8001de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_RCC_OscConfig+0x248>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fc5e 	bl	8001680 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc5a 	bl	8001680 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e167      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x200>
 8001de6:	e01b      	b.n	8001e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_OscConfig+0x248>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fc47 	bl	8001680 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	e00e      	b.n	8001e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff fc43 	bl	8001680 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d907      	bls.n	8001e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e150      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	42470000 	.word	0x42470000
 8001e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ea      	bne.n	8001df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8097 	beq.w	8001f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b7d      	ldr	r3, [pc, #500]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a7c      	ldr	r2, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b7a      	ldr	r3, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b77      	ldr	r3, [pc, #476]	; (800203c <HAL_RCC_OscConfig+0x474>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b74      	ldr	r3, [pc, #464]	; (800203c <HAL_RCC_OscConfig+0x474>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a73      	ldr	r2, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x474>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fc03 	bl	8001680 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7ff fbff 	bl	8001680 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e10c      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x474>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x2ea>
 8001ea4:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea8:	4a63      	ldr	r2, [pc, #396]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x324>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x30c>
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	4a5b      	ldr	r2, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0x324>
 8001ed4:	4b58      	ldr	r3, [pc, #352]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a57      	ldr	r2, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	4b55      	ldr	r3, [pc, #340]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a54      	ldr	r2, [pc, #336]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f023 0304 	bic.w	r3, r3, #4
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d015      	beq.n	8001f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fbc4 	bl	8001680 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff fbc0 	bl	8001680 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0cb      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	4b49      	ldr	r3, [pc, #292]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ee      	beq.n	8001efc <HAL_RCC_OscConfig+0x334>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fbae 	bl	8001680 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7ff fbaa 	bl	8001680 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0b5      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ee      	bne.n	8001f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	4a38      	ldr	r2, [pc, #224]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a1 	beq.w	80020a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d05c      	beq.n	800202c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d141      	bne.n	8001ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_RCC_OscConfig+0x478>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fb7e 	bl	8001680 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fb7a 	bl	8001680 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e087      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	491b      	ldr	r1, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x478>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb53 	bl	8001680 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fb4f 	bl	8001680 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e05c      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x416>
 8001ffc:	e054      	b.n	80020a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_RCC_OscConfig+0x478>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fb3c 	bl	8001680 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff fb38 	bl	8001680 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e045      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_OscConfig+0x470>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x444>
 800202a:	e03d      	b.n	80020a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e038      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
 8002038:	40023800 	.word	0x40023800
 800203c:	40007000 	.word	0x40007000
 8002040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x4ec>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d028      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d121      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d11a      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800207a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800207c:	4293      	cmp	r3, r2
 800207e:	d111      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	3b01      	subs	r3, #1
 800208e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0cc      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d90c      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b65      	ldr	r3, [pc, #404]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b8      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a52      	ldr	r2, [pc, #328]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	494d      	ldr	r1, [pc, #308]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d044      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d119      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d003      	beq.n	8002176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002172:	2b03      	cmp	r3, #3
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e067      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4934      	ldr	r1, [pc, #208]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff fa6a 	bl	8001680 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff fa66 	bl	8001680 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e04f      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d20c      	bcs.n	8002200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e032      	b.n	8002266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4916      	ldr	r1, [pc, #88]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	490e      	ldr	r1, [pc, #56]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223e:	f000 f821 	bl	8002284 <HAL_RCC_GetSysClockFreq>
 8002242:	4602      	mov	r2, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	490a      	ldr	r1, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	5ccb      	ldrb	r3, [r1, r3]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8ea 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023c00 	.word	0x40023c00
 8002274:	40023800 	.word	0x40023800
 8002278:	08003644 	.word	0x08003644
 800227c:	20000004 	.word	0x20000004
 8002280:	20000008 	.word	0x20000008

08002284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002288:	b094      	sub	sp, #80	; 0x50
 800228a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
 8002290:	2300      	movs	r3, #0
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002294:	2300      	movs	r3, #0
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229c:	4b79      	ldr	r3, [pc, #484]	; (8002484 <HAL_RCC_GetSysClockFreq+0x200>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d00d      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x40>
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	f200 80e1 	bhi.w	8002470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x34>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d003      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x3a>
 80022b6:	e0db      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022bc:	e0db      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022be:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCC_GetSysClockFreq+0x208>)
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022c2:	e0d8      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c4:	4b6f      	ldr	r3, [pc, #444]	; (8002484 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ce:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d063      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_GetSysClockFreq+0x200>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	2200      	movs	r2, #0
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
 80022ee:	2300      	movs	r3, #0
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
 80022f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022f6:	4622      	mov	r2, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	f04f 0000 	mov.w	r0, #0
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002308:	0150      	lsls	r0, r2, #5
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4621      	mov	r1, r4
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	6139      	str	r1, [r7, #16]
 8002314:	4629      	mov	r1, r5
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002328:	4659      	mov	r1, fp
 800232a:	018b      	lsls	r3, r1, #6
 800232c:	4651      	mov	r1, sl
 800232e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002332:	4651      	mov	r1, sl
 8002334:	018a      	lsls	r2, r1, #6
 8002336:	4651      	mov	r1, sl
 8002338:	ebb2 0801 	subs.w	r8, r2, r1
 800233c:	4659      	mov	r1, fp
 800233e:	eb63 0901 	sbc.w	r9, r3, r1
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800234e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002356:	4690      	mov	r8, r2
 8002358:	4699      	mov	r9, r3
 800235a:	4623      	mov	r3, r4
 800235c:	eb18 0303 	adds.w	r3, r8, r3
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	462b      	mov	r3, r5
 8002364:	eb49 0303 	adc.w	r3, r9, r3
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002376:	4629      	mov	r1, r5
 8002378:	024b      	lsls	r3, r1, #9
 800237a:	4621      	mov	r1, r4
 800237c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002380:	4621      	mov	r1, r4
 8002382:	024a      	lsls	r2, r1, #9
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	2200      	movs	r2, #0
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
 800238e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002394:	f7fd ff20 	bl	80001d8 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4613      	mov	r3, r2
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a0:	e058      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	2200      	movs	r2, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	4611      	mov	r1, r2
 80023ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023bc:	4642      	mov	r2, r8
 80023be:	464b      	mov	r3, r9
 80023c0:	f04f 0000 	mov.w	r0, #0
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	0159      	lsls	r1, r3, #5
 80023ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ce:	0150      	lsls	r0, r2, #5
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4641      	mov	r1, r8
 80023d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80023da:	4649      	mov	r1, r9
 80023dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023f4:	ebb2 040a 	subs.w	r4, r2, sl
 80023f8:	eb63 050b 	sbc.w	r5, r3, fp
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	00eb      	lsls	r3, r5, #3
 8002406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240a:	00e2      	lsls	r2, r4, #3
 800240c:	4614      	mov	r4, r2
 800240e:	461d      	mov	r5, r3
 8002410:	4643      	mov	r3, r8
 8002412:	18e3      	adds	r3, r4, r3
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	464b      	mov	r3, r9
 8002418:	eb45 0303 	adc.w	r3, r5, r3
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242a:	4629      	mov	r1, r5
 800242c:	028b      	lsls	r3, r1, #10
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002434:	4621      	mov	r1, r4
 8002436:	028a      	lsls	r2, r1, #10
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	2200      	movs	r2, #0
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	61fa      	str	r2, [r7, #28]
 8002444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002448:	f7fd fec6 	bl	80001d8 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_GetSysClockFreq+0x200>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0x204>)
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002478:	4618      	mov	r0, r3
 800247a:	3750      	adds	r7, #80	; 0x50
 800247c:	46bd      	mov	sp, r7
 800247e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	00f42400 	.word	0x00f42400
 800248c:	007a1200 	.word	0x007a1200

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff0 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08003654 	.word	0x08003654

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffdc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0b5b      	lsrs	r3, r3, #13
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08003654 	.word	0x08003654

080024f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	220f      	movs	r2, #15
 8002506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_RCC_GetClockConfig+0x60>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0207 	and.w	r2, r3, #7
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002580:	2b00      	cmp	r3, #0
 8002582:	d038      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800258a:	f7ff f879 	bl	8001680 <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002592:	f7ff f875 	bl	8001680 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0bd      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	495a      	ldr	r1, [pc, #360]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025d0:	f7ff f856 	bl	8001680 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025d8:	f7ff f852 	bl	8001680 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e09a      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025ea:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8083 	beq.w	800270a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a47      	ldr	r2, [pc, #284]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
 8002614:	4b45      	ldr	r3, [pc, #276]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a42      	ldr	r2, [pc, #264]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800262c:	f7ff f828 	bl	8001680 <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002634:	f7ff f824 	bl	8001680 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e06c      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002652:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d02f      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d028      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002670:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d114      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fff2 	bl	8001680 <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe ffee 	bl	8001680 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e034      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ee      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ce:	d10d      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e4:	4911      	ldr	r1, [pc, #68]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
 80026ea:	e005      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a0e      	ldr	r2, [pc, #56]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026f6:	6093      	str	r3, [r2, #8]
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	4909      	ldr	r1, [pc, #36]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7d1a      	ldrb	r2, [r3, #20]
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800271c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	42470068 	.word	0x42470068
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470e40 	.word	0x42470e40
 8002738:	424711e0 	.word	0x424711e0

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e041      	b.n	80027d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fdc0 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 fab6 	bl	8002cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e044      	b.n	800287e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_TIM_Base_Start_IT+0xb0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x6c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d013      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x6c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_TIM_Base_Start_IT+0xb4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x6c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_TIM_Base_Start_IT+0xb8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x6c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_TIM_Base_Start_IT+0xbc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x6c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_TIM_Base_Start_IT+0xc0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d111      	bne.n	800286c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d010      	beq.n	800287c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286a:	e007      	b.n	800287c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40010000 	.word	0x40010000
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40014000 	.word	0x40014000

080028a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e041      	b.n	8002936 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f839 	bl	800293e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 fa04 	bl	8002cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b02      	cmp	r3, #2
 8002966:	d122      	bne.n	80029ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d11b      	bne.n	80029ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0202 	mvn.w	r2, #2
 800297e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f98a 	bl	8002cae <HAL_TIM_IC_CaptureCallback>
 800299a:	e005      	b.n	80029a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f97c 	bl	8002c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f98d 	bl	8002cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d122      	bne.n	8002a02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d11b      	bne.n	8002a02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f06f 0204 	mvn.w	r2, #4
 80029d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f960 	bl	8002cae <HAL_TIM_IC_CaptureCallback>
 80029ee:	e005      	b.n	80029fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f952 	bl	8002c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f963 	bl	8002cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d122      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d11b      	bne.n	8002a56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0208 	mvn.w	r2, #8
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f936 	bl	8002cae <HAL_TIM_IC_CaptureCallback>
 8002a42:	e005      	b.n	8002a50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f928 	bl	8002c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f939 	bl	8002cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d122      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0210 	mvn.w	r2, #16
 8002a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2208      	movs	r2, #8
 8002a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f90c 	bl	8002cae <HAL_TIM_IC_CaptureCallback>
 8002a96:	e005      	b.n	8002aa4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8fe 	bl	8002c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f90f 	bl	8002cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10e      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0201 	mvn.w	r2, #1
 8002ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fe fbcd 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d10e      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d107      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fa9d 	bl	800303c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d10e      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d107      	bne.n	8002b2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8d4 	bl	8002cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d10e      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d107      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0220 	mvn.w	r2, #32
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa67 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e088      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x130>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 f925 	bl	8002dec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 020c 	bic.w	r2, r2, #12
 8002bb0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6999      	ldr	r1, [r3, #24]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	619a      	str	r2, [r3, #24]
 8002bc4:	e060      	b.n	8002c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d11c      	bne.n	8002c06 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f000 f96e 	bl	8002ebc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
 8002c04:	e040      	b.n	8002c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d11b      	bne.n	8002c44 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f000 f98b 	bl	8002f36 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 020c 	bic.w	r2, r2, #12
 8002c2e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69d9      	ldr	r1, [r3, #28]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	61da      	str	r2, [r3, #28]
 8002c42:	e021      	b.n	8002c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d11c      	bne.n	8002c84 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f000 f9a8 	bl	8002fae <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69d9      	ldr	r1, [r3, #28]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	021a      	lsls	r2, r3, #8
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	61da      	str	r2, [r3, #28]
 8002c82:	e001      	b.n	8002c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <TIM_Base_SetConfig+0xe4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00f      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <TIM_Base_SetConfig+0xe8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <TIM_Base_SetConfig+0xec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x38>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <TIM_Base_SetConfig+0xf0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0xe4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01b      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d017      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <TIM_Base_SetConfig+0xe8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <TIM_Base_SetConfig+0xec>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00f      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <TIM_Base_SetConfig+0xf0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <TIM_Base_SetConfig+0xf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <TIM_Base_SetConfig+0xf8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <TIM_Base_SetConfig+0xfc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <TIM_Base_SetConfig+0xe4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40014000 	.word	0x40014000
 8002de4:	40014400 	.word	0x40014400
 8002de8:	40014800 	.word	0x40014800

08002dec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f023 0201 	bic.w	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <TIM_TI1_SetConfig+0xbc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <TIM_TI1_SetConfig+0x56>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d00f      	beq.n	8002e42 <TIM_TI1_SetConfig+0x56>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <TIM_TI1_SetConfig+0xc0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <TIM_TI1_SetConfig+0x56>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <TIM_TI1_SetConfig+0xc4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <TIM_TI1_SetConfig+0x56>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <TIM_TI1_SetConfig+0xc8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d003      	beq.n	8002e42 <TIM_TI1_SetConfig+0x56>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <TIM_TI1_SetConfig+0xcc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <TIM_TI1_SetConfig+0x5a>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <TIM_TI1_SetConfig+0x5c>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e003      	b.n	8002e66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f023 030a 	bic.w	r3, r3, #10
 8002e80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f003 030a 	and.w	r3, r3, #10
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	621a      	str	r2, [r3, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40014000 	.word	0x40014000

08002ebc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0210 	bic.w	r2, r3, #16
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	031b      	lsls	r3, r3, #12
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002f86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	621a      	str	r2, [r3, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	031b      	lsls	r3, r3, #12
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003000:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	031b      	lsls	r3, r3, #12
 8003006:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e03f      	b.n	80030e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe f996 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f829 	bl	80030ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f0:	b0c0      	sub	sp, #256	; 0x100
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	ea40 0301 	orr.w	r3, r0, r1
 8003114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	431a      	orrs	r2, r3
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003144:	f021 010c 	bic.w	r1, r1, #12
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003152:	430b      	orrs	r3, r1
 8003154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003166:	6999      	ldr	r1, [r3, #24]
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	ea40 0301 	orr.w	r3, r0, r1
 8003172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b8f      	ldr	r3, [pc, #572]	; (80033b8 <UART_SetConfig+0x2cc>)
 800317c:	429a      	cmp	r2, r3
 800317e:	d005      	beq.n	800318c <UART_SetConfig+0xa0>
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <UART_SetConfig+0x2d0>)
 8003188:	429a      	cmp	r2, r3
 800318a:	d104      	bne.n	8003196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800318c:	f7ff f9a0 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003194:	e003      	b.n	800319e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003196:	f7ff f987 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 800319a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a8:	f040 810c 	bne.w	80033c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031be:	4622      	mov	r2, r4
 80031c0:	462b      	mov	r3, r5
 80031c2:	1891      	adds	r1, r2, r2
 80031c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031c6:	415b      	adcs	r3, r3
 80031c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ce:	4621      	mov	r1, r4
 80031d0:	eb12 0801 	adds.w	r8, r2, r1
 80031d4:	4629      	mov	r1, r5
 80031d6:	eb43 0901 	adc.w	r9, r3, r1
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ee:	4690      	mov	r8, r2
 80031f0:	4699      	mov	r9, r3
 80031f2:	4623      	mov	r3, r4
 80031f4:	eb18 0303 	adds.w	r3, r8, r3
 80031f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031fc:	462b      	mov	r3, r5
 80031fe:	eb49 0303 	adc.w	r3, r9, r3
 8003202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800321a:	460b      	mov	r3, r1
 800321c:	18db      	adds	r3, r3, r3
 800321e:	653b      	str	r3, [r7, #80]	; 0x50
 8003220:	4613      	mov	r3, r2
 8003222:	eb42 0303 	adc.w	r3, r2, r3
 8003226:	657b      	str	r3, [r7, #84]	; 0x54
 8003228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800322c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003230:	f7fc ffd2 	bl	80001d8 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <UART_SetConfig+0x2d4>)
 800323a:	fba3 2302 	umull	r2, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	011c      	lsls	r4, r3, #4
 8003242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003246:	2200      	movs	r2, #0
 8003248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800324c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	1891      	adds	r1, r2, r2
 800325a:	64b9      	str	r1, [r7, #72]	; 0x48
 800325c:	415b      	adcs	r3, r3
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003264:	4641      	mov	r1, r8
 8003266:	eb12 0a01 	adds.w	sl, r2, r1
 800326a:	4649      	mov	r1, r9
 800326c:	eb43 0b01 	adc.w	fp, r3, r1
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800327c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003284:	4692      	mov	sl, r2
 8003286:	469b      	mov	fp, r3
 8003288:	4643      	mov	r3, r8
 800328a:	eb1a 0303 	adds.w	r3, sl, r3
 800328e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003292:	464b      	mov	r3, r9
 8003294:	eb4b 0303 	adc.w	r3, fp, r3
 8003298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032b0:	460b      	mov	r3, r1
 80032b2:	18db      	adds	r3, r3, r3
 80032b4:	643b      	str	r3, [r7, #64]	; 0x40
 80032b6:	4613      	mov	r3, r2
 80032b8:	eb42 0303 	adc.w	r3, r2, r3
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
 80032be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032c6:	f7fc ff87 	bl	80001d8 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <UART_SetConfig+0x2d4>)
 80032d2:	fba3 2301 	umull	r2, r3, r3, r1
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2264      	movs	r2, #100	; 0x64
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	1acb      	subs	r3, r1, r3
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <UART_SetConfig+0x2d4>)
 80032e8:	fba3 2302 	umull	r2, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032f4:	441c      	add	r4, r3
 80032f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003308:	4642      	mov	r2, r8
 800330a:	464b      	mov	r3, r9
 800330c:	1891      	adds	r1, r2, r2
 800330e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003310:	415b      	adcs	r3, r3
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003318:	4641      	mov	r1, r8
 800331a:	1851      	adds	r1, r2, r1
 800331c:	6339      	str	r1, [r7, #48]	; 0x30
 800331e:	4649      	mov	r1, r9
 8003320:	414b      	adcs	r3, r1
 8003322:	637b      	str	r3, [r7, #52]	; 0x34
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003330:	4659      	mov	r1, fp
 8003332:	00cb      	lsls	r3, r1, #3
 8003334:	4651      	mov	r1, sl
 8003336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333a:	4651      	mov	r1, sl
 800333c:	00ca      	lsls	r2, r1, #3
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	4603      	mov	r3, r0
 8003344:	4642      	mov	r2, r8
 8003346:	189b      	adds	r3, r3, r2
 8003348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800334c:	464b      	mov	r3, r9
 800334e:	460a      	mov	r2, r1
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800336c:	460b      	mov	r3, r1
 800336e:	18db      	adds	r3, r3, r3
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
 8003372:	4613      	mov	r3, r2
 8003374:	eb42 0303 	adc.w	r3, r2, r3
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800337e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003382:	f7fc ff29 	bl	80001d8 <__aeabi_uldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <UART_SetConfig+0x2d4>)
 800338c:	fba3 1302 	umull	r1, r3, r3, r2
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	2164      	movs	r1, #100	; 0x64
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	3332      	adds	r3, #50	; 0x32
 800339e:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <UART_SetConfig+0x2d4>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	f003 0207 	and.w	r2, r3, #7
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4422      	add	r2, r4
 80033b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033b4:	e105      	b.n	80035c2 <UART_SetConfig+0x4d6>
 80033b6:	bf00      	nop
 80033b8:	40011000 	.word	0x40011000
 80033bc:	40011400 	.word	0x40011400
 80033c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033d6:	4642      	mov	r2, r8
 80033d8:	464b      	mov	r3, r9
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	6239      	str	r1, [r7, #32]
 80033de:	415b      	adcs	r3, r3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033e6:	4641      	mov	r1, r8
 80033e8:	1854      	adds	r4, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb43 0501 	adc.w	r5, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	00eb      	lsls	r3, r5, #3
 80033fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033fe:	00e2      	lsls	r2, r4, #3
 8003400:	4614      	mov	r4, r2
 8003402:	461d      	mov	r5, r3
 8003404:	4643      	mov	r3, r8
 8003406:	18e3      	adds	r3, r4, r3
 8003408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800340c:	464b      	mov	r3, r9
 800340e:	eb45 0303 	adc.w	r3, r5, r3
 8003412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003432:	4629      	mov	r1, r5
 8003434:	008b      	lsls	r3, r1, #2
 8003436:	4621      	mov	r1, r4
 8003438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343c:	4621      	mov	r1, r4
 800343e:	008a      	lsls	r2, r1, #2
 8003440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003444:	f7fc fec8 	bl	80001d8 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4b60      	ldr	r3, [pc, #384]	; (80035d0 <UART_SetConfig+0x4e4>)
 800344e:	fba3 2302 	umull	r2, r3, r3, r2
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	011c      	lsls	r4, r3, #4
 8003456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	1891      	adds	r1, r2, r2
 800346e:	61b9      	str	r1, [r7, #24]
 8003470:	415b      	adcs	r3, r3
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003478:	4641      	mov	r1, r8
 800347a:	1851      	adds	r1, r2, r1
 800347c:	6139      	str	r1, [r7, #16]
 800347e:	4649      	mov	r1, r9
 8003480:	414b      	adcs	r3, r1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003490:	4659      	mov	r1, fp
 8003492:	00cb      	lsls	r3, r1, #3
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349a:	4651      	mov	r1, sl
 800349c:	00ca      	lsls	r2, r1, #3
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	4642      	mov	r2, r8
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034ac:	464b      	mov	r3, r9
 80034ae:	460a      	mov	r2, r1
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034d0:	4649      	mov	r1, r9
 80034d2:	008b      	lsls	r3, r1, #2
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034da:	4641      	mov	r1, r8
 80034dc:	008a      	lsls	r2, r1, #2
 80034de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034e2:	f7fc fe79 	bl	80001d8 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <UART_SetConfig+0x4e4>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a34      	ldr	r2, [pc, #208]	; (80035d0 <UART_SetConfig+0x4e4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350a:	441c      	add	r4, r3
 800350c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003510:	2200      	movs	r2, #0
 8003512:	673b      	str	r3, [r7, #112]	; 0x70
 8003514:	677a      	str	r2, [r7, #116]	; 0x74
 8003516:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800351a:	4642      	mov	r2, r8
 800351c:	464b      	mov	r3, r9
 800351e:	1891      	adds	r1, r2, r2
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	415b      	adcs	r3, r3
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800352a:	4641      	mov	r1, r8
 800352c:	1851      	adds	r1, r2, r1
 800352e:	6039      	str	r1, [r7, #0]
 8003530:	4649      	mov	r1, r9
 8003532:	414b      	adcs	r3, r1
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003542:	4659      	mov	r1, fp
 8003544:	00cb      	lsls	r3, r1, #3
 8003546:	4651      	mov	r1, sl
 8003548:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800354c:	4651      	mov	r1, sl
 800354e:	00ca      	lsls	r2, r1, #3
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	4603      	mov	r3, r0
 8003556:	4642      	mov	r2, r8
 8003558:	189b      	adds	r3, r3, r2
 800355a:	66bb      	str	r3, [r7, #104]	; 0x68
 800355c:	464b      	mov	r3, r9
 800355e:	460a      	mov	r2, r1
 8003560:	eb42 0303 	adc.w	r3, r2, r3
 8003564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	663b      	str	r3, [r7, #96]	; 0x60
 8003570:	667a      	str	r2, [r7, #100]	; 0x64
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800357e:	4649      	mov	r1, r9
 8003580:	008b      	lsls	r3, r1, #2
 8003582:	4641      	mov	r1, r8
 8003584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003588:	4641      	mov	r1, r8
 800358a:	008a      	lsls	r2, r1, #2
 800358c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003590:	f7fc fe22 	bl	80001d8 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <UART_SetConfig+0x4e4>)
 800359a:	fba3 1302 	umull	r1, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2164      	movs	r1, #100	; 0x64
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <UART_SetConfig+0x4e4>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	f003 020f 	and.w	r2, r3, #15
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4422      	add	r2, r4
 80035c0:	609a      	str	r2, [r3, #8]
}
 80035c2:	bf00      	nop
 80035c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ce:	bf00      	nop
 80035d0:	51eb851f 	.word	0x51eb851f

080035d4 <__libc_init_array>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4d0d      	ldr	r5, [pc, #52]	; (800360c <__libc_init_array+0x38>)
 80035d8:	4c0d      	ldr	r4, [pc, #52]	; (8003610 <__libc_init_array+0x3c>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	2600      	movs	r6, #0
 80035e0:	42a6      	cmp	r6, r4
 80035e2:	d109      	bne.n	80035f8 <__libc_init_array+0x24>
 80035e4:	4d0b      	ldr	r5, [pc, #44]	; (8003614 <__libc_init_array+0x40>)
 80035e6:	4c0c      	ldr	r4, [pc, #48]	; (8003618 <__libc_init_array+0x44>)
 80035e8:	f000 f820 	bl	800362c <_init>
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	2600      	movs	r6, #0
 80035f2:	42a6      	cmp	r6, r4
 80035f4:	d105      	bne.n	8003602 <__libc_init_array+0x2e>
 80035f6:	bd70      	pop	{r4, r5, r6, pc}
 80035f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fc:	4798      	blx	r3
 80035fe:	3601      	adds	r6, #1
 8003600:	e7ee      	b.n	80035e0 <__libc_init_array+0xc>
 8003602:	f855 3b04 	ldr.w	r3, [r5], #4
 8003606:	4798      	blx	r3
 8003608:	3601      	adds	r6, #1
 800360a:	e7f2      	b.n	80035f2 <__libc_init_array+0x1e>
 800360c:	08003664 	.word	0x08003664
 8003610:	08003664 	.word	0x08003664
 8003614:	08003664 	.word	0x08003664
 8003618:	08003668 	.word	0x08003668

0800361c <memset>:
 800361c:	4402      	add	r2, r0
 800361e:	4603      	mov	r3, r0
 8003620:	4293      	cmp	r3, r2
 8003622:	d100      	bne.n	8003626 <memset+0xa>
 8003624:	4770      	bx	lr
 8003626:	f803 1b01 	strb.w	r1, [r3], #1
 800362a:	e7f9      	b.n	8003620 <memset+0x4>

0800362c <_init>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	bf00      	nop
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr

08003638 <_fini>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	bf00      	nop
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr
